(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{399:function(t,s,a){"use strict";a.r(s);var n=a(54),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"第12章-树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第12章-树"}},[t._v("#")]),t._v(" 第12章 树")]),t._v(" "),a("h2",{attrs:{id:"树的概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#树的概念"}},[t._v("#")]),t._v(" 树的概念")]),t._v(" "),a("h3",{attrs:{id:"什么是树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是树"}},[t._v("#")]),t._v(" 什么是树？")]),t._v(" "),a("h4",{attrs:{id:"真实的树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#真实的树"}},[t._v("#")]),t._v(" 真实的树：")]),t._v(" "),a("ul",[a("li",[t._v("相信每个人对现实生活中的树都会非常熟悉")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/dragon-liu/picBed@master/img/image.1b1skx1rxaao.png",alt:"image"}})]),t._v(" "),a("h4",{attrs:{id:"树的特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#树的特点"}},[t._v("#")]),t._v(" 树的特点：")]),t._v(" "),a("ul",[a("li",[t._v("树一般都有一个"),a("strong",[t._v("根")]),t._v("，连接着根的是"),a("strong",[t._v("树干")])]),t._v(" "),a("li",[t._v("树干会发生分叉，形成许多"),a("strong",[t._v("树枝")]),t._v("，树枝会继续分化成更小的"),a("strong",[t._v("树枝")])]),t._v(" "),a("li",[t._v("树枝的最后是"),a("strong",[t._v("叶子")])])]),t._v(" "),a("h4",{attrs:{id:"树的抽象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#树的抽象"}},[t._v("#")]),t._v(" 树的抽象:")]),t._v(" "),a("ul",[a("li",[t._v("专家们对树的结构进行了抽象, 发现树可以"),a("strong",[t._v("模拟生活")]),t._v("中的"),a("strong",[t._v("很多场景")]),t._v(".")])]),t._v(" "),a("p",[t._v("现实生活中很多结构都是树的抽象，比如公司组织架构，家谱。模拟的树结构相当于旋转 "),a("code",[t._v("180°")]),t._v(" 的树。")]),t._v(" "),a("p",[t._v("我们再将里面的"),a("strong",[t._v("数据移除")]),t._v(", 仅仅抽象出来"),a("strong",[t._v("结构")]),t._v(", 那么就是我们要学习的"),a("strong",[t._v("树结构")]),t._v("。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/dragon-liu/picBed@master/img/image.1qs99i6zp98g.png",alt:"image"}})]),t._v(" "),a("h3",{attrs:{id:"树的优点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#树的优点"}},[t._v("#")]),t._v(" 树的优点")]),t._v(" "),a("ul",[a("li",[t._v("树结构和数组/链表/哈希表的对比有什么优点呢?")])]),t._v(" "),a("p",[t._v("数组：")]),t._v(" "),a("ul",[a("li",[t._v("优点：数组的主要优点是根据"),a("strong",[t._v("下标值访问")]),t._v("效率会很高.")]),t._v(" "),a("li",[t._v("缺点：查找数据时需要先对数据进行"),a("strong",[t._v("排序")]),t._v("，生成"),a("strong",[t._v("有序数组")]),t._v("，才能提高查找效率；并且在插入和删除元素时，需要大量的"),a("strong",[t._v("位移操作")]),t._v("(插入到首位或者中间位置的时候), 效率很低.")])]),t._v(" "),a("p",[t._v("链表：")]),t._v(" "),a("ul",[a("li",[t._v("优点：数据的插入和删除操作效率都很高；")]),t._v(" "),a("li",[t._v("缺点："),a("strong",[t._v("查找")]),t._v("效率低，需要从头开始依次查找，直到找到目标数据为止；当需要在链表中间位置插入或删除数据时，插入或删除的效率都不高。")])]),t._v(" "),a("p",[t._v("哈希表：")]),t._v(" "),a("ul",[a("li",[t._v("优点：哈希表的插入/查询/删除效率都非常高；")]),t._v(" "),a("li",[t._v("缺点："),a("strong",[t._v("空间利用率不高")]),t._v("，底层使用的数组中很多单元没有被利用；并且哈希表中的元素是"),a("strong",[t._v("无序")]),t._v("的，不能按照固定顺序遍历哈希表中的元素；而且不能快速找出哈希表中"),a("strong",[t._v("最大值或最小值")]),t._v("这些特殊值。")])]),t._v(" "),a("p",[t._v("树结构：")]),t._v(" "),a("ul",[a("li",[t._v("优点：树结构综合了上述三种结构的优点，同时也弥补了它们存在的缺点（虽然效率不一定都比它们高），比如树结构中数据都是有序的，查找效率高；空间利用率高；并且可以快速获取最大值和最小值等。")])]),t._v(" "),a("p",[t._v("总的来说："),a("strong",[t._v("每种数据结构都有自己特定的应用场景")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"树的术语"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#树的术语"}},[t._v("#")]),t._v(" 树的术语")]),t._v(" "),a("p",[t._v("在描述树的各个部分的时候有很多"),a("strong",[t._v("术语")]),t._v(".")]),t._v(" "),a("ul",[a("li",[t._v("为了让介绍的内容更容易理解, 需要知道一些"),a("strong",[t._v("树的术语")]),t._v(".")]),t._v(" "),a("li",[t._v("不过大部分术语都与真实世界的"),a("strong",[t._v("树相关")]),t._v(", 或者和"),a("strong",[t._v("家庭关系相关")]),t._v("(如父节点和子节点), 所以它们比较容易理解.")])]),t._v(" "),a("p",[t._v("我们先来看一下树的结构")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/XPoet/image-hosting@master/JavaScript-数据结构与算法/image.3t0ypfn5leo0.png",alt:"image"}})]),t._v(" "),a("h4",{attrs:{id:"树的定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#树的定义"}},[t._v("#")]),t._v(" 树的定义:")]),t._v(" "),a("ul",[a("li",[t._v("树（Tree）：由 n（n ≥ 0）个节点构成的"),a("strong",[t._v("有限集合")]),t._v("。\n"),a("ul",[a("li",[t._v("当 n = 0 时，称为"),a("strong",[t._v("空树")]),t._v("。")])])]),t._v(" "),a("li",[t._v("对于任意一棵非空树（n > 0），它具备以下性质：\n"),a("ul",[a("li",[t._v("数中有一个称为"),a("strong",[t._v("根")]),t._v("(Root)的特殊节点，用 "),a("strong",[t._v("r")]),t._v(" 表示；")]),t._v(" "),a("li",[t._v("其余节点可分为 m（m > 0）个互不相交的有限集合 T1，T2，...，Tm，其中每个集合本身又是一棵树，称为原来树的"),a("strong",[t._v("子树（SubTree）")]),t._v("。")])])])]),t._v(" "),a("h4",{attrs:{id:"树的常用术语"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#树的常用术语"}},[t._v("#")]),t._v(" 树的常用术语：")]),t._v(" "),a("ul",[a("li",[t._v("节点的度（Degree）：节点的"),a("strong",[t._v("子树个数")]),t._v("，比如节点 B 的度为 2；")]),t._v(" "),a("li",[t._v("树的度：树的所有节点中"),a("strong",[t._v("最大的度数")]),t._v("，如上图树的度为 2；")]),t._v(" "),a("li",[t._v("叶节点（Leaf）："),a("strong",[t._v("度为 0 的节点")]),t._v("（也称为叶子节点），如上图的 H，I 等；")]),t._v(" "),a("li",[t._v("父节点（Parent）：度不为 0 的节点称为父节点，如上图节点 B 是节点 D 和 E 的父节点；")]),t._v(" "),a("li",[t._v("子节点（Child）：若 B 是 D 的父节点，那么 D 就是 B 的子节点；")]),t._v(" "),a("li",[t._v("兄弟节点（Sibling）：具有"),a("strong",[t._v("同一父节点")]),t._v("的各节点彼此是兄弟节点，比如上图的 B 和 C，D 和 E 互为兄弟节点；")]),t._v(" "),a("li",[t._v("路径和路径长度：路径指的是一个节点到另一节点的通道，路径所包含边的个数称为路径长度，比如 A->H 的路径长度为 3；")]),t._v(" "),a("li",[t._v("节点的层次（Level）：规定"),a("strong",[t._v("根节点在 1 层")]),t._v("，其他任一节点的层数是其父节点的"),a("strong",[t._v("层数加 1")]),t._v("。如 B 和 C 节点的层次为 2；")]),t._v(" "),a("li",[t._v("树的深度（Depth）：树种所有节点中的"),a("strong",[t._v("最大层次")]),t._v("是这棵树的深度，如上图树的深度为 4；")])]),t._v(" "),a("h3",{attrs:{id:"树结构的表示方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#树结构的表示方式"}},[t._v("#")]),t._v(" 树结构的表示方式")]),t._v(" "),a("h4",{attrs:{id:"最普通的表示方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#最普通的表示方法"}},[t._v("#")]),t._v(" 最普通的表示方法：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/XPoet/image-hosting@master/JavaScript-数据结构与算法/image.4v9sayu9zu60.png",alt:"image"}})]),t._v(" "),a("p",[t._v("如图，树结构的组成方式类似于链表，都是由一个个节点连接构成。不过，根据每个父节点子节点数量的不同，每一个父节点需要的引用数量也不同。比如节点 A 需要 3 个引用，分别指向子节点 B，C，D；B 节点需要 2 个引用，分别指向子节点 E 和 F；K 节点由于没有子节点，所以不需要引用。")]),t._v(" "),a("p",[t._v("这种方法缺点在于我们无法确定某一结点的引用数。")]),t._v(" "),a("h4",{attrs:{id:"儿子-兄弟表示法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#儿子-兄弟表示法"}},[t._v("#")]),t._v(" 儿子-兄弟表示法：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/XPoet/image-hosting@master/JavaScript-数据结构与算法/image.3o34yy6h0420.png",alt:"image"}})]),t._v(" "),a("p",[t._v("这种表示方法可以完整地记录每个节点的数据，比如：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//节点A")]),t._v("\nNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//存储数据")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" data\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//统一只记录左边的子节点")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("leftChild "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("B")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//统一只记录右边的第一个兄弟节点")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("rightSibling "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//节点B")]),t._v("\nNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" data\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("leftChild "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("E")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("rightSibling "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("C")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//节点F")]),t._v("\nNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" data\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("leftChild "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("rightSibling "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br")])]),a("p",[t._v("这种表示法的优点在于每一个节点中引用的数量都是确定的。")]),t._v(" "),a("h4",{attrs:{id:"儿子-兄弟表示法旋转"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#儿子-兄弟表示法旋转"}},[t._v("#")]),t._v(" 儿子-兄弟表示法旋转")]),t._v(" "),a("p",[t._v("以下为儿子-兄弟表示法组成的树结构：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/XPoet/image-hosting@master/JavaScript-数据结构与算法/image.6tucreh71ok0.png",alt:"image"}})]),t._v(" "),a("p",[t._v("将其顺时针旋转 45° 之后：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/XPoet/image-hosting@master/JavaScript-数据结构与算法/image.4blmsiyhevg0.png",alt:"image"}})]),t._v(" "),a("p",[t._v("这样就成为了一棵二叉树，由此我们可以得出结论："),a("strong",[t._v("任何树都可以通过二叉树进行模拟")]),t._v("。但是这样父节点不是变了吗？其实，父节点的设置只是为了方便指向子节点，在代码实现中谁是父节点并没有关系，只要能正确找到对应节点即可。")])])}),[],!1,null,null,null);s.default=r.exports}}]);